#!/bin/bash
#
# Copyright 2016 HLRS, University of Stuttgart
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


#============================================================================#
#                                                                            #
#                          GLOBAL CONFIGURATION                              #
#                                                                            #
#============================================================================#

# source the global profile, for getting DEBUG and TRACE flags if set
source /etc/profile.d/99-mikelangelo-hpc_stack.sh;

#
# source the global functions and configuration
# order below is as required, do not change
#
source "$SCRIPT_BASE_DIR/common/const.sh";
source "$SCRIPT_BASE_DIR/common/root-config.sh" $@;
source "$SCRIPT_BASE_DIR/common/root-functions.sh";


#============================================================================#
#                                                                            #
#                          SCRIPT CONFIGURATION                              #
#                                                                            #
#============================================================================#


#============================================================================#
#                                                                            #
#                               FUNCTIONS                                    #
#                                                                            #
#============================================================================#


#---------------------------------------------------------
#
# Spawns a process that boots VMs and configures iocm 
#
#
function spawnProcess() {
  # spawn
  {
  	# cache start date
  	startDate="$(date +%s)";
    while [ ! -e "$FLAG_FILE_DIR/.userPrologueDone" ]; do
      sleep 1;
      logDebugMsg "Waiting for flag file '$FLAG_FILE_DIR/.userPrologueDone' to become available..";
      # timeout reached ?
      isTimeoutReached $ROOT_PROLOGUE_TIMEOUT $startDate;
      # cancelled meanwhile ?
      checkCancelFlag;
    done
    
    # boot all (localhost) VMs
    bootVMs;
    
    # setup IOcm
    setupIOCM;
    
    # indicate work is done
    touch "$FLAG_FILE_DIR/.rootPrologueDone";
    
  } & return 0;
}


#---------------------------------------------------------
#
# Boots VMs.
#
#
function bootVMs() {
  # boot all VMs dedicated to the current node we run on
  i=1;
  for domainXML in ${VM_DOMAIN_XML_LIST[@]}; do

    # construct filename of metadata yaml file that was used to create the seed.img
    metadataFile="$VM_JOB_DIR/$LOCALHOST/${i}-metadata";
    # grep vhostname from metadata file
    vHostName="$(grep 'hostname: ' $metadataFile | cut -d' ' -f2)";

    # boot VM
    logDebugMsg "Booting VM number '$i/$totalCount' on compute node '$LOCALHOST' from domainXML='$domainXML'.";
    if $DEBUG; then
      vmLogFile=$VMLOG_FILE_PREFIX/$i-libvirt.log;
      output=$(virsh $VIRSH_OPTS --log $vmLogFile create $domainXML |& tee -a $LOG_FILE);
    else
      output=$(virsh $VIRSH_OPTS create $domainXML);
    fi
    res=$?;
    logDebugMsg "virsh create cmd output:\n'$output'";

    # check if it's running
    vmName="$(grep '<name>' $domainXML | cut -d'>' -f2 | cut -d'<' -f1)";
    if [ $res -ne 0 ] \
        || [[ "$output" =~ operation\ failed ]] \
        || [ ! -n "$(virsh list | grep $vmName)" ] ; then
      # abort with error code 2
      logErrorMsg "Booting VM '$vmName' from domain XML file '$domainXML' failed!" 2 \
      & abort 2;
    elif [[ "$output" =~ operation\ is\ not\ valid ]]; then
      # abort with error code 9
      logErrorMsg "Booting VM '$vmName' from domain XML file '$domainXML' failed! Maybe it is running already?" 9 \
      & abort 9;
    fi
    logDebugMsg "VM is running.";
  done
}



#============================================================================#
#                                                                            #
#                                 MAIN                                       #
#                                                                            #
#============================================================================#

#
# we need to wait for the job dir, otherwise it is created by the first log msg
# and that causes a race-condition in qsub where the symlink is created for VM jobs
#
waitUntilJobDirIsAvailable;

logDebugMsg "Running Prologue-Parallel as '$(id)', file: '$(basename ${BASH_SOURCE[0]})'";
logInfoMsg "Root VM prologue.parallel script started.";

# capture STDOUT/STDERR outputs to log file
captureOutputStreams;

# in case there was a script for this in the $TORQUE_HOME/mom_priv
# that has been renamed (by the Makefile) to *.orig, call it now
runScriptPreviouslyInPlace "$(basename ${BASH_SOURCE[0]})";

# setup vRDMA
setUPvRDMA_P1;

# start snap job task
startSnapTask;

# ramdisk or shared fs to be used ?
if $USE_RAM_DISK; then
  createRAMDisk;
else
  checkSharedFS;
fi

# spawn process for booting VMs and configuring iocm
spawnProcess;

# print info
logInfoMsg "Root prologue.parallel script finished";

# print the consumed time in debug mode
runTimeStats;

# run the job
exit 0;
